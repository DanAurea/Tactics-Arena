Analyse préliminaire



Afin de prendre connaissance du jeu qu'il nous a été donné de concevoir, Ewen et moi-même nous sommes renseigner sur les règles de bases du Tactics Arena. Cela nous a permis de définir nos priorités en termes de travail et de temps consacrés pour ce que nous voulions implémenter. Nous avons également joué au jeu originel afin de se rendre compte de comment se déroule une partie.
Cela nous a permit tout d'abord de définir les conditions de victoire ou de match nul. Ensuite, nous nous sommes attardés sur les unités présentent dans le jeu, sur les actions qu'elles pouvaient executer. Ainsi, nous avons défnis 3 actions principales :
	-Se déplacer
	-Et / ou attaquer
	-Et / ou changer de direction
L'action de changer de direction doit être la dernière action effectué lors d'un tour, et on ne peut revenir en arrière sur une action déjà réalisée.

Un tour est limité en temps, compris entre 1 et 2 minutes, qui dépend du nombre d'unités restantes. Lorsque ce temps est dépassé le tour se finit automatiquement si au minumum une commande a été effectué, dans le cas contraire, le joueur perd la partie.

Nous avons également établis plusieurs types d'unités  :
	-Les COMBATTANTS qui infligent des dommages physique
	-Les SOIGNEURS soignant tout les alliés
	-Les MAGES, peuvant être de deux types :
		-Les Mages de Guerres qui infligent des dommages magique
		-Les Apprentis qui augmentent le FOCUS
	-Les INVOCATIONS n'ont aucun HP ET sont détruite au moindre dégâts ET ne peuvent être 	soignées.
Il existe également des restrictions sur le nombre d'unités pouvant être placé sur le terrain.
On peut placer au maximum sur le champ de bataille :
	-3 Knight
	-2 Scout
	-1 Lightning Totem
	-2 Stone Golem
	-1 Dragon Tyrant
	-1 Furgon

Enfin, afin d'être plus clair sur ce dont les unités sont capables de faire, nous avons définis les statistiques, capacité spéciales et effets de statut, disponnibles à l'annexe X.
A la suite de cette analyse préliminaire, nous avons discuté afin de savoir si nous allions reproduire un jeu similaire, ou si nous gardions l'idée principale pour en faire autre chose.
Nous avons choisis de reproduire le jeu, mais adapté à la console et avec nos propres ajouts.

Pour réaliser ce projet, nous avons décider de séparer le travail en trois modules distincts :
	-Un module affichage
	-Un module unité
	-Un module moteur de jeu

Cela permettait de répartir les tâches dans notre groupe, et ainsi mieux nous organiser pour la suite du projet. 

Ainsi, nous nous sommes partagé les tâches comme suit :
	-Module affichage : Tristan
	-Module unité : Ewen
	-Module moteur de jeu : Brandon
Afin d'être efficaces et rapides, nous nous sommes régulièrement fixés des dates butoires sur ce que nous devions faire, afin de ne pas perdre de temps durant le projet.
De plus, pour travailler ensemble, nous avons créé plusieurs branches sous bitbucket pour tester séparément nos programmes, et merge une fois que tout était fonctionnel, pour éviter d'avoir un seul dépôt où se mélange partie finie et partie en cours de finition.
















































Module affichage


Le module affichage est très important, car il s'agit de l'interface entre l'utilisateur et le programme en lui-même. Il fallait donc faire quelque chose de "simple" (pour cause l'affichage dans un terminal), mais aussi de complet afin de pouvoir utiliser correctement tout ce qui a été fait par mes camarades, à savoir le jeu en lui-même.
Pour se faire, le module affichage se décompose en deux parties disctinctes : la grille, et le menu. 
Le fichier menu.c contient :

void mainMenu(); permettant l'affichage du logo du jeu ainsi que les principales fonctionnalités necessaire à un jeu, à savoir lancer une nouvelle partie, charger une partie, accèder à l'aide du jeu et enfin quitter. C'est à partir de cette fonction que débute notre programme, il permet d'accèder à la totalité du contenu.


void mainHelp(); Cette fonction permet d'afficher la quasi-totalité de l'aide. Elle permet à un joueur ne connaissant pas le jeu de se renseigner sur les règles, le vocabulaire propre au jeu, les unités disponnibles ainsi que leurs caractéristiques, les capacités spéciales et les effets de statuts. Il s'agit d'un passage obligé pour toute personne ne connaissant pas le déroulement d'un jeu type Tactics Arena.


void gameMenu(); Il s'agit de la fonction permettant de jouer un tour. Elle permet aux joueurs de déplacer leurs unités, d'attaquer, de changer de direction, passer leurs tours, sauvegarder et enfin abandonner la partie.


void unitMenu(int choice); Appelée par la précédente, elle permet à une unité spécifique de se déplacer, d'attaquer ou de changer de direction.


void unitList(); Permet d'afficher la liste des unités inclus dans le jeu (si une unité est rajoutée au jeu, elle sera également rajoutée dans cette liste).


Beaucoup de modifications ont été réalisées durant le projet sur le menu, afin de le rendre viable, et utilisable par quiconque. C'est d'ailleurs pour cela que l'on a mis une partie aide, afin que n'importe qui ne connaissant pas le jeu, puisse tout de même jouer, sans devoir se rendre sur internet. L'ajout de couleurs permet également de mieux s'y retrouver dans le programme, et d'attirer l'attention sur les parties que nous jugions importantes à mettre en valeur.













Le module affichage contient également le fichier grid.c. La grille a été réalisé à partir de caractères spéciaux, trouvés sur internet, comme par exemple "\e(0\x78\e(B" pour une ligne vertical. Afin d'être plus simple à manipuler, nous avons placé ces caractères spéciaux dans grid.h pour les réutiliser par la suite en utilisant par exemple VL pour une ligne verticale.
Les prototypes des fonctions sont :

void dispX(); Affiche les coordonnées verticales au dessus de la grille et le haut de la grille.

void gridDisp(); Fonction principale, permettant l'affichage de la grille, ainsi que les coordonnées. Elle permet également de définir les couleurs des unités en fonction du numéro du joueur. Une légende a été rajoutée en dessous de la grille, permettant de montrer à quoi une couleur affichée à l'écran correspond.

Toutes ces fonctions réunis permettent un affichage convenable sur terminal, comme le montre l'annexe X. Nous avons choisis de respecter le jeu original et de définir la grille en 11x11, mais la grille est également modulable, il suffit de changer une constante et la grille s'adapte automatiquement. 

De nombreux problèmes sont apparus au cours de ce module. Par exemple, les coordonnées s'affichaient mal, au dessus de la grille. C'est pour cela que la fonction dispX a été implémentée, afin de palier à ce problème. Ensuite, il a fallut trouver comment adapter le jeu et les menus pour que tout soit fait dans le terminal. Comme tout est contrôlé au clavier, il a également fallut que l'on vérifie chaque entrée.





























Résultats

Les fonctionnalités que l'on voulait implémenter l'ont toute été, grâce à notre répartition des tâches et aux dates limites que l'on s'est fixé. Cela nous a permis d'être efficace et de programmer ce que l'on voulait qu'il soit ajouté au jeu. Le fait que le programme soit modulaire nous a beaucoup aidé à implémenter rapidement de nouvelles fonctionnalités. Ainsi, le planning prévisionnel a été plus ou moins respecté (certaines tâches nous ont pris plus de temps que prévu, donc on s'est souvent entre-aidé). Des exemples d'executions du programme sont disponnibles en annexes X X.

L'une des améliorations envisageables serait d'intégrer une IA, le temps qui nous a été donné pour ce projet s'est révélé insuffisant pour se permettre de programmer une IA décente. Nous nous sommes donc focalisé sur le jeu en lui-même, et donc le mode joueur contre joueur.
Nous avons également penser à faire une interface graphique (SDL) afin que le jeu rende mieux que sur terminal.

Personnellement, ce projet m'a permis de mieux travailler en équipe et d'utiliser un serveur git de manière adéquat. Également, le fait de me retrouver avec des personnes meilleurs que moi m'a permis de m'améliorer, grâce à leurs conseils qu'ils m'ont apportés le long de ce projet.